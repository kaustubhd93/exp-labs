    1  sudo hostnamectl set-hostname --static kube-master-01
    2  sudo apt update
    8  ip link
    9  sudo cat /sys/class/dmi/id/product_uuid
   10  ip r
   12  ifconfig 
   13  lsmod | grep br_netfilter
   14  locate iptables
   15  sudo sysctl --system
   16  sudo modprobe br_netfilter
   17  lsmod | grep br_netfilter
   18  sudo sysctl --system
   19  cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
   20  net.bridge.bridge-nf-call-ip6tables = 1
   21  net.bridge.bridge-nf-call-iptables = 1
   22  EOF
   23  sudo sysctl --system
   24  curl -s https://raw.githubusercontent.com/kaustubhd93/exp-labs/master/shell-scripts/setup-docker.sh | bash
   25  sudo systemctl status docker
   26  sudo docker run hello-world
   27  sudo usermod -aG docker ubuntu
   28  docker images
   29  sudo apt-get update && sudo apt-get install -y apt-transport-https curl
   30  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
   31  cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-bionic main
EOF

   32  sudo apt-get update
   33  cat /etc/apt/sources.list.d/kubernetes.list
   34  sudo vim /etc/apt/sources.list.d/kubernetes.list
   35  sudo apt-get update
   36  sudo apt-get install -y kubelet kubeadm kubectl
   37  sudo apt-mark hold kubelet kubeadm kubectl
   40  kubelet --version
   41  kubeadm --version
   42  kubeadm version
   43  systemctl daemon-reload
   44  sudo systemctl daemon-reload
   45  #sudo systemctl restart kubelet
   46  sudo systemctl status kubelet
   47  sudo systemctl restart kubelet
   48  sudo systemctl status kubelet
   49  ps aux | grep -i kube
   50  ps aux | grep -i kubelet
   51  sudo systemctl status kubelet
   52  ip r
   53  ifconfig 
   54  kubeadm init --control-plane-endpoint=172.31.95.104 --apiserver-advertise-address=172.31.95.104
   55  sudo kubeadm init --control-plane-endpoint=172.31.95.104 --apiserver-advertise-address=172.31.95.104
   56  mkdir -p $HOME/.kube
   57  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
   58  cd .kube/
   59  ls
   60  cat config 
   61  sudo cat config 
   62  cd
   63  sudo chown $(id -u):$(id -g) $HOME/.kube/config
   64  cat .kube/config 
   65  ls -lrth .kube/config 
   66  ls -ld .kube/
   67  curl https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')
   68  kubectl version | base64 | tr -d '\n'
   69  ls -lrth
   70  ll
   71  kubectl apply -f https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')
   72  kubectl get pods
   73  kubectl get pods -n kube-system
   74  kubectl get all
   75  kubectl get nodes
   76  kubectl get pods
   77  kubectl get all -n kube-systemt
   78  kubectl get all -n kube-system
   79  docker ps
   80  free -m
   81  w
   82  free -m
   83  docker images
   84  ls -lrth
   85  git clone https://github.com/kaustubhd93/exp-labs.git
   86  cd exp-labs/
   87  cd learning-kubernetes/deploy-voting-app/
   88  ls -lrth
   89  kubectl create -f worker-app-pod.yaml
   90  kubectl get pods
   91  kubectl delete pod/worker-app-pod
   92  kubectl get pods
   93  kubectl create -f voting-app-pod.yaml 
   94  kubectl create -f voting-app-service.yaml 
   95  kubectl create -f redis-db-pod.yml 
   96  kubectl create -f redis-db-service.yaml 
   97  kubectl create -f postgres-pod.yaml 
   98  kubectl create -f postgres-service.yaml 
   99  kubectl create -f worker-app-pod.yaml 
  100  kubectl get pods
  101  kubectl get pods,svc
  102  curl http://10.108.148.181:30008
  103  kubectl get svc
  104  kubectl get svc --url
  105  kubectl cluster-info
  106  ip r
  107  ifconfig 
  108  curl http://172.31.95.104:30008
  109  telnet 172.31.95.104 30008
  110  kubectl create -f result-app-pod.yaml 
  111  kubectl create -f result-app-service.yaml 
  112  kubectl get pods,svc
  113  cd
  114  history


-------------------------------------------- k8s 1.29 ----------------------------

Pre-requisites: https://kubernetes.io/docs/setup/production-environment/container-runtimes/

    1  apt-get update
    2  cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

    3  modprobe overlay
    4  modprobe br_netfilter
    5  cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

    6  sysctl --system
    7  lsmod | grep (br_netfilter|overlay)
    8  lsmod | grep -e '(br_netfilter|overlay)'
    9  lsmod | grep -E '(br_netfilter|overlay)'
   10  sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward
   11  cd /opt/
   12  ls
   13  mkdir -p downloads
   14  cd downloads/
   15  ls
   16  cd ..
   17  rm -rf downloads/
   18  cd
   19  mkdir -p downloads
   20  cd downloads/
   21  wget https://github.com/containerd/containerd/releases/download/v1.7.13/containerd-1.7.13-linux-amd64.tar.gz
   22  tar Cxzvf /usr/local containerd-1.7.13-linux-amd64.tar.gz
   23  wget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
   24  cat containerd.service
   25  cp containerd.service /usr/local/lib/systemd/system/containerd.service
   26  mkdir -p /usr/local/lib/systemd/system/
   27  cp containerd.service /usr/local/lib/systemd/system/containerd.service
   28  systemctl daemon-reload
   29  systemctl enable --now containerd
   30  wget https://github.com/opencontainers/runc/releases/download/v1.1.12/runc.amd64
   31  install -m 755 runc.amd64 /usr/local/sbin/runc
   32  mkdir -p /opt/cni/bin
   33  wget https://github.com/containernetworking/plugins/releases/download/v1.4.0/cni-plugins-linux-amd64-v1.4.0.tgz
   34  tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.1.1.tgz
   35  tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.4.0.tgz
   36  containerd config default > /etc/containerd/config.toml
   37  mkdir -p /etc/containerd
   38  containerd config default > /etc/containerd/config.toml
   39  view /etc/containerd/config.toml
   40  vim /etc/containerd/config.toml
   41  systemctl status containerd
   42  systemctl restart containerd
   43  systemctl status containerd
   44  cd
   45  ctr
   46  ctr ps
   47  ctr containers
   48  ctr containers list
   49  ctr containers images
   50  ctr images list
   51  cd downloads/
   52  vim /etc/containerd/config.toml
   53  apt-get update
   54  apt-get install -y apt-transport-https ca-certificates curl gpg
   55  state /etc/apt/keyrings
   56  stat /etc/apt/keyrings
   57  curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
   58  echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
   59  apt-get update
   60  apt-get install -y kubelet kubeadm kubectl
   61  apt-mark hold kubelet kubeadm kubectl
   62  cd
   64  ip r
   65  kubeadm init --control-plane-endpoint=10.31.35.189 --apiserver-advertise-address=10.31.35.189 --pod-network-cidr=192.168.0.0/16
   66  mkdir -p $HOME/.kube
   67  kubectl get all
   68  kubectl -n kube-systetem get all
   69  kubectl -n kube-system get all
       kubectl taint nodes --all node-role.kubernetes.io/control-plane-
       # For installing networking plugin calico: refer https://docs.tigera.io/calico/latest/getting-started/kubernetes/quickstart
  157  kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.2/manifests/tigera-operator.yaml
  158  kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.2/manifests/custom-resources.yaml
  159  watch kubectl get pods -n calico-system
  160  kubectl get nodes